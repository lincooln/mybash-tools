#!/usr/bin/env bash

# =============================================================================
# MYBASHRC ‚Äî –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ bash-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
# –í–µ—Ä—Å–∏—è: 1.4 (—Å --dry-run, –ø–∞—Å—Ö–∞–ª–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø–µ—á–∞—Ç–æ–∫)
#
# –†–∞–∑—Ä–∞–±–æ—Ç–∞–ª Lincooln, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –≤ –∫–æ–¥–µ Qwen3-Max
# =============================================================================

_MYBASH_TARGET="$HOME/.mybashrc"
_dry_run=false

# === –°–ü–ò–°–ö–ò –£–¢–ò–õ–ò–¢ ===========================================================
declare -A _ALL_TOOLS_GROUPS
_ALL_TOOLS_GROUPS["base"]="–ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã|nano htop"
_ALL_TOOLS_GROUPS["network"]="–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã|git curl wget"

declare -A _DEBIAN_TOOLS_GROUPS
_DEBIAN_TOOLS_GROUPS["mc"]="Midnight Commander|mc"

declare -A _ALT_TOOLS_GROUPS
_ALT_TOOLS_GROUPS["eepm"]="EterSoft PM|eepm"
_ALT_TOOLS_GROUPS["alterator"]="Alterator|alterator alterator-tool alterator-base"

declare -A _REDOS_TOOLS_GROUPS
# _REDOS_TOOLS_GROUPS["..."]="..."

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================================================

_my_is_installed() {
    local pkg="$1"
    case "$_myos" in
        debian)
            dpkg -l "$pkg" &>/dev/null
            ;;
        altlinux|redos)
            rpm -q "$pkg" &>/dev/null
            ;;
        *)
            return 1
            ;;
    esac
}

_my_install_packages() {
    local packages=("$@")
    if [[ ${#packages[@]} -eq 0 ]]; then return 0; fi
    if $_dry_run; then
        echo "[DRY-RUN] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: ${packages[*]}"
        return 0
    fi
    case "$_myos" in
        debian)
            sudo apt install -y "${packages[@]}" || { echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ Debian"; return 1; }
            ;;
        altlinux|redos)
            sudo apt-get install -y "${packages[@]}" || { echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ $_myos"; return 1; }
            ;;
        *)
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $_myos"
            return 1
            ;;
    esac
}

_my_remove_packages() {
    local packages=("$@")
    if [[ ${#packages[@]} -eq 0 ]]; then return 0; fi
    if $_dry_run; then
        echo "[DRY-RUN] –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: ${packages[*]}"
        return 0
    fi
    case "$_myos" in
        debian)
            sudo apt remove -y "${packages[@]}" || { echo "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ Debian"; return 1; }
            ;;
        altlinux|redos)
            sudo apt-get remove -y "${packages[@]}" || { echo "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ $_myos"; return 1; }
            ;;
        *)
            echo "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $_myos"
            return 1
            ;;
    esac
}

_my_setup_tool() {
    declare -A _MY_TOOLS_MERGED
    for tag in "${!_ALL_TOOLS_GROUPS[@]}"; do
        _MY_TOOLS_MERGED["$tag"]="${_ALL_TOOLS_GROUPS[$tag]}"
    done
    case "$_myos" in
        debian)
            for tag in "${!_DEBIAN_TOOLS_GROUPS[@]}"; do
                _MY_TOOLS_MERGED["$tag"]="${_DEBIAN_TOOLS_GROUPS[$tag]}"
            done
            ;;
        altlinux)
            for tag in "${!_ALT_TOOLS_GROUPS[@]}"; do
                _MY_TOOLS_MERGED["$tag"]="${_ALT_TOOLS_GROUPS[$tag]}"
            done
            ;;
        redos)
            for tag in "${!_REDOS_TOOLS_GROUPS[@]}"; do
                _MY_TOOLS_MERGED["$tag"]="${_REDOS_TOOLS_GROUPS[$tag]}"
            done
            ;;
    esac

    if ! command -v dialog >/dev/null; then
        echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é dialog –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞..."
        case "$_myos" in
            debian) sudo apt install -y dialog ;;
            altlinux|redos) sudo apt-get install -y dialog ;;
        esac
    fi

    local dialog_args=()
    for tag in "${!_MY_TOOLS_MERGED[@]}"; do
        IFS='|' read -r display_name packages_str <<< "${_MY_TOOLS_MERGED[$tag]}"
        read -ra packages <<< "$packages_str"

        local all_installed=true
        for pkg in "${packages[@]}"; do
            if ! _my_is_installed "$pkg"; then
                all_installed=false
                break
            fi
        done
        local state=$( [[ "$all_installed" == true ]] && echo "on" || echo "off" )
        dialog_args+=("$tag" "$display_name" "$state")
    done

    local selected_tags
    selected_tags=$(dialog --stdout --checklist "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—ã:" 20 70 10 "${dialog_args[@]}")
    [[ $? -ne 0 ]] || [[ -z "$selected_tags" ]] && { echo "–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."; return 0; }

    local to_install=() to_remove=()
    for tag in "${!_MY_TOOLS_MERGED[@]}"; do
        IFS='|' read -r _ packages_str <<< "${_MY_TOOLS_MERGED[$tag]}"
        read -ra packages <<< "$packages_str"

        if [[ " $selected_tags " == *" $tag "* ]]; then
            for pkg in "${packages[@]}"; do
                if ! _my_is_installed "$pkg"; then
                    to_install+=("$pkg")
                fi
            done
        else
            for pkg in "${packages[@]}"; do
                if _my_is_installed "$pkg"; then
                    to_remove+=("$pkg")
                fi
            done
        fi
    done

    if [[ ${#to_install[@]} -gt 0 ]]; then
        if $_dry_run; then
            echo "[DRY-RUN] –ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${to_install[*]}"
        else
            echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: ${to_install[*]}"
        fi
        _my_install_packages "${to_install[@]}" || return 1
    fi
    if [[ ${#to_remove[@]} -gt 0 ]]; then
        if $_dry_run; then
            echo "[DRY-RUN] –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã: ${to_remove[*]}"
        else
            echo "–£–¥–∞–ª—è—é: ${to_remove[*]}"
        fi
        _my_remove_packages "${to_remove[@]}" || return 1
    fi
}

# === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========================================================

_myos="unknown"
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    case "${ID_LIKE:-$ID}" in
        *debian*)
            _myos="debian"
            ;;
        *altlinux*)
            _myos="altlinux"
            ;;
        redos)
            _myos="redos"
            ;;
        *)
            _myos="$ID"
            ;;
    esac
fi

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
_action=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        -n|--dry-run)
            _dry_run=true
            shift
            ;;
        -i|--install|-u|--uninstall)
            _action="$1"
            shift
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
            exit 1
            ;;
    esac
done

case "${_action:-}" in
    -i|--install)
        if command -v sudo >/dev/null 2>&1; then
            echo "üîë –û–±–Ω–∞—Ä—É–∂–µ–Ω sudo. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤..."
            if sudo -n true 2>/dev/null; then
                echo "‚úÖ –î–æ—Å—Ç—É–ø –±–µ–∑ –ø–∞—Ä–æ–ª—è. –ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ç–∏–ª–∏—Ç..."
                _my_setup_tool
            else
                echo "üîí sudo —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞..."
                if sudo true 2>/dev/null; then
                    echo "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ç–∏–ª–∏—Ç..."
                    _my_setup_tool
                else
                    echo "‚ùå sudo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ç–∏–ª–∏—Ç."
                fi
            fi
        else
            echo "‚ÑπÔ∏è sudo –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ç–∏–ª–∏—Ç."
        fi

        # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
        _my_editor=""
        if [[ -n "$EDITOR" ]] && command -v "$EDITOR" >/dev/null 2>&1; then
            _my_editor="$EDITOR"
        elif command -v mcedit >/dev/null 2>&1; then
            _my_editor="mcedit"
        elif command -v nano >/dev/null 2>&1; then
            _my_editor="nano"
        elif command -v vi >/dev/null 2>&1; then
            _my_editor="vi"
        else
            _my_editor="cat"
        fi

        _my_fm=""
        if command -v mc >/dev/null 2>&1; then
            _my_fm="mc"
        fi

        _my_top="top"
        if command -v htop >/dev/null 2>&1; then
            _my_top="htop"
        fi

        # === –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
        _MYBASH_USE_ICONS=1
        if [[ -n "$COLORTERM" ]] || [[ "$TERM" == *"256color"* ]] || [[ "$TERM" == "xterm"* ]]; then
            _MYBASH_COLOR_MODE="color"
        else
            _MYBASH_COLOR_MODE="tty"
        fi

        if [[ "$_MYBASH_COLOR_MODE" == "color" ]] && [[ "${_MYBASH_USE_ICONS:-}" == "1" ]]; then
            _MYBASH_TIME_ICON="Ôê∫ "
            _MYBASH_HOST_ICON="ÔÑà "
            _MYBASH_DIR_ICON="ÔÅª "
            _MYBASH_PROMPT_ICON="Ôïì "
        elif [[ "$_MYBASH_COLOR_MODE" == "color" ]]; then
            _MYBASH_TIME_ICON=""
            _MYBASH_HOST_ICON=""
            _MYBASH_DIR_ICON=""
            _MYBASH_PROMPT_ICON="‚Üí "
        else
            _MYBASH_TIME_ICON=""
            _MYBASH_HOST_ICON=""
            _MYBASH_DIR_ICON=""
            _MYBASH_PROMPT_ICON="> "
        fi

        if [[ "$_MYBASH_COLOR_MODE" == "color" ]]; then
            _MYBASH_TIME_COLOR="\[\e[90m\]"
            _MYBASH_HOST_COLOR="\[\e[36m\]"
            _MYBASH_PATH_COLOR="\[\e[37m\]"
            _MYBASH_PROMPT_COLOR="\[\e[35m\]"
            _MYBASH_RESET="\[\e[0m\]"
        else
            _MYBASH_TIME_COLOR=""
            _MYBASH_HOST_COLOR=""
            _MYBASH_PATH_COLOR=""
            _MYBASH_PROMPT_COLOR=""
            _MYBASH_RESET=""
        fi

        # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ~/.mybashrc (—Ç–µ–ø–µ—Ä—å —Å –ø–∞—Å—Ö–∞–ª–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!) ===
        if $_dry_run; then
            echo "[DRY-RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $_MYBASH_TARGET"
            echo "[DRY-RUN] –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ ~/.bashrc"
        else
            cat > "$_MYBASH_TARGET" <<EOF
# ~/.mybashrc ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# === –°–ò–°–¢–ï–ú–ê ===
_myos="$_myos"

# === –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===
_my_editor="$_my_editor"
_my_fm="$_my_fm"
_my_top="$_my_top"

# === –û–§–û–†–ú–õ–ï–ù–ò–ï ===
_MYBASH_USE_ICONS=$_MYBASH_USE_ICONS
_MYBASH_COLOR_MODE="$_MYBASH_COLOR_MODE"
_MYBASH_TIME_ICON="$_MYBASH_TIME_ICON"
_MYBASH_HOST_ICON="$_MYBASH_HOST_ICON"
_MYBASH_DIR_ICON="$_MYBASH_DIR_ICON"
_MYBASH_PROMPT_ICON="$_MYBASH_PROMPT_ICON"
_MYBASH_TIME_COLOR="$_MYBASH_TIME_COLOR"
_MYBASH_HOST_COLOR="$_MYBASH_HOST_COLOR"
_MYBASH_PATH_COLOR="$_MYBASH_PATH_COLOR"
_MYBASH_PROMPT_COLOR="$_MYBASH_PROMPT_COLOR"
_MYBASH_RESET="$_MYBASH_RESET"

# === –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï ===
PS1="\${_MYBASH_TIME_COLOR}\${_MYBASH_TIME_ICON}\D{%Y-%m-%d %H:%M:%S}\${_MYBASH_RESET} \${_MYBASH_HOST_COLOR}\${_MYBASH_HOST_ICON}[\h-\u]\${_MYBASH_RESET} \${_MYBASH_PATH_COLOR}\${_MYBASH_DIR_ICON}\w\${_MYBASH_RESET}\n\${_MYBASH_PROMPT_COLOR}\${_MYBASH_PROMPT_ICON}\${_MYBASH_RESET}"

# === –ê–õ–ò–ê–°–´ ===
# @cmd e ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä ($_my_editor)
alias e="$_my_editor"

# @cmd mc ‚Äî —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
$(if [[ -n "$_my_fm" ]]; then
    echo "alias mc=\"$_my_fm\""
else
    echo "alias mc='echo \"mc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π e –∏–ª–∏ ls\" >&2 && ls -a'"
fi)

# @cmd t ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ($_my_top)
alias t="$_my_top"

# @cmd ls ‚Äî –≤—Å–µ —Ñ–∞–π–ª—ã (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
alias ls='ls -a'

# @cmd update ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
$(case "$_myos" in
    debian) echo "alias update='sudo apt update && sudo apt upgrade -y'" ;;
    altlinux|redos) echo "alias update='sudo apt-get update && sudo apt-get upgrade -y'" ;;
    *) echo "alias update='echo \"–û–° –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: $_myos\"'" ;;
esac)

# === –ü–ê–°–•–ê–õ–ö–ò ===
# @cmd secret ‚Äî –ª–∏—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –∞–≤—Ç–æ—Ä–æ–≤
alias secret='echo "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª Lincooln, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª Qwen3-Max ‚Äî –∏ –¥–∞, –º—ã –æ–±–∞ –ª—é–±–∏–º —Ö–æ—Ä–æ—à–∏–π bash-–∫–æ–¥."'

# @cmd oops ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
alias oops='echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: sl‚Üíls, cls‚Üíclear, gerp‚Üígrep, mkae‚Üímake, apt‚Üîapt-get (–∞–≤—Ç–æ-–ø–æ–¥—Å–∫–∞–∑–∫–∞)"'

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã)
sl() {
    echo -e "\\nüöÇ –û–π! –¢—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Ö–æ—Ç–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å \\\`ls\\\`?\\n"
    sleep 2
    command ls "\$@"
}

cls() {
    echo -e "\\nüßπ –û–π! –í Linux –∫–æ–º–∞–Ω–¥–∞ ‚Äî \\\`clear\\\`. –°–µ–π—á–∞—Å –≤—Å—ë –ø–æ—á–∏—â—É!\\n"
    sleep 2
    command clear
}

gerp() {
    echo -e "\\nüîç –û–π! –ü–æ—Ö–æ–∂–µ, —Ç—ã –∏—Å–∫–∞–ª \\\`grep\\\`? –ò—â—É –∑–∞ —Ç–µ–±—è...\\n"
    sleep 2
    command grep "\$@"
}

grpe() {
    echo -e "\\nüîç –û–π! –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É \\\`grep\\\`?\\n"
    sleep 2
    command grep "\$@"
}

mkae() {
    echo -e "\\n‚öôÔ∏è –û–π! –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏ ‚Äî \\\`make\\\`. –ó–∞–ø—É—Å–∫–∞—é...\\n"
    sleep 2
    command make "\$@"
}

mak() {
    echo -e "\\n‚öôÔ∏è –û–π! –¢—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ö–æ—Ç–µ–ª \\\`make\\\`?\\n"
    sleep 2
    command make "\$@"
}

# –ê–≤—Ç–æ-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ apt/apt-get ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
$(case "$_myos" in
    altlinux|redos)
        cat <<'SUBEOF'
apt() {
    echo -e "\nüì¶ –û–π! –í $_myos –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî \`apt-get\`. –°–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—é —á–µ—Ä–µ–∑ –Ω–µ–≥–æ...\n"
    sleep 2
    command apt-get "$@"
}
SUBEOF
        ;;
    debian)
        cat <<'SUBEOF'
apt-get() {
    echo -e "\nüì¶ –û–π! –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Debian-—Å–∏—Å—Ç–µ–º–∞—Ö —É–¥–æ–±–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`apt\`. –ù–æ —Å–¥–µ–ª–∞—é, –∫–∞–∫ –ø—Ä–æ—Å–∏—à—å...\n"
    sleep 2
    command apt-get "$@"
}
SUBEOF
        ;;
esac)

# === –§–£–ù–ö–¶–ò–ò ===
# @cmd info ‚Äî –û–° –∏ —è–¥—Ä–æ
info() {
    echo "=== System Info ==="
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        echo "OS: \$PRETTY_NAME"
    else
        echo "OS: \$OSTYPE"
    fi
    echo "Kernel: \$(uname -sr)"
    # –ü–∞—Å—Ö–∞–ª–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if [[ "\$USER" == "$(printf '%q' "$USER")" ]]; then
        echo -e "\nüí° P.S. –≠—Ç–æ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Å–æ–∑–¥–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π. –û—à–∏–±–∫–∏ ‚Äî —á–∞—Å—Ç—å –ø—É—Ç–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –∏—Ö –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å.\n"
    fi
}

# @cmd extract ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤
extract() {
    if [[ -f "\$1" ]]; then
        case "\$1" in
            *.tar.bz2)   tar xjf "\$1" ;;
            *.tar.gz)    tar xzf "\$1" ;;
            *.bz2)       bunzip2 "\$1" ;;
            *.gz)        gunzip "\$1" ;;
            *.tar)       tar xf "\$1" ;;
            *.tbz2)      tar xjf "\$1" ;;
            *.tgz)       tar xzf "\$1" ;;
            *.zip)       unzip "\$1" ;;
            *.Z)         uncompress "\$1" ;;
            *.7z)        7z x "\$1" ;;
            *)           echo "'\$1' ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" ;;
        esac
    else
        echo "'\$1' ‚Äî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# @cmd mycmd ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
mycmd() {
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ ~/.mybashrc:"
    echo "----------------------------------"
    grep -h "^# @cmd" "$_MYBASH_TARGET" 2>/dev/null | \\
        sed 's/^# @cmd[[:space:]]*//' | \\
        sort
}

# === –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–Ø ===
# @cmd systemctl ‚Äî –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è systemd
$(if command -v systemctl >/dev/null 2>&1; then
    echo "source /usr/share/bash-completion/completions/systemctl 2>/dev/null || \\"
    echo "complete -W \"start stop restart status enable disable list-units list-unit-files\" systemctl"
else
    echo "# systemctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
fi)
EOF

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ ~/.bashrc
            if ! grep -q "# MYBASH INIT" "$HOME/.bashrc" 2>/dev/null; then
                echo -e "\n# MYBASH INIT\nsource $_MYBASH_TARGET" >> "$HOME/.bashrc"
                echo "‚úÖ mybash –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ ~/.bashrc"
            fi
            echo "‚úÖ mybash —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $_MYBASH_TARGET"
            echo "üëâ –í—ã–ø–æ–ª–Ω–∏: source ~/.bashrc"
        fi
        ;;

    -u|--uninstall)
        if $_dry_run; then
            echo "[DRY-RUN] –ë—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: $_MYBASH_TARGET"
            echo "[DRY-RUN] –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ ~/.bashrc"
        else
            if [[ -f "$HOME/.bashrc" ]]; then
                sed -i.bak '/# MYBASH INIT/,+1d' "$HOME/.bashrc" 2>/dev/null || true
                echo "üßπ –ó–∞–ø–∏—Å—å –∏–∑ ~/.bashrc —É–¥–∞–ª–µ–Ω–∞ (—Ä–µ–∑–µ—Ä–≤: ~/.bashrc.bak)"
            fi
            rm -f "$_MYBASH_TARGET"
            echo "üóëÔ∏è mybash —É–¥–∞–ª—ë–Ω."
        fi
        ;;

    "")
        cat <<'EOF'
MYBASHRC ‚Äî –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ bash-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  ./mybashrc.sh -i [--dry-run]     ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
  ./mybashrc.sh -u [--dry-run]     ‚Üí —É–¥–∞–ª–∏—Ç—å
  ./mybashrc.sh                    ‚Üí —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–û–ø—Ü–∏–∏:
  -n, --dry-run   ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
EOF
        ;;

    *)
        echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $_action"
        exit 1
        ;;
esac
